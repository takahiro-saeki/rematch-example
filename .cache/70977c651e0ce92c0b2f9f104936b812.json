{"dependencies":[{"name":"babel-runtime/regenerator"},{"name":"react"},{"name":"react-dom"},{"name":"react-redux"},{"name":"@rematch/core"}],"generated":{"js":"\"use strict\";\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require(\"react-dom\");\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _core = require(\"@rematch/core\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nvar count = {\n  state: 0,\n  reducers: {\n    increment: function increment(state, payload) {\n      return state + payload;\n    },\n    decrement: function decrement(state, payload) {\n      return state - payload;\n    }\n  },\n  effects: {\n    incrementAsync: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(payload, rootState) {\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('inside of effects', { payload: payload, rootState: rootState });\n                _context.next = 3;\n                return new Promise(function (resolve) {\n                  return setTimeout(resolve, 1000);\n                });\n\n              case 3:\n                this.increment(payload);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function incrementAsync(_x, _x2) {\n        return _ref.apply(this, arguments);\n      }\n\n      return incrementAsync;\n    }()\n  }\n};\n\nvar store = (0, _core.init)({\n  models: {\n    count: count\n  }\n});\n\nvar Count = function Count(_ref2) {\n  var count = _ref2.count,\n      increment = _ref2.increment,\n      incrementAsync = _ref2.incrementAsync,\n      decrement = _ref2.decrement;\n  return _react2.default.createElement(\n    \"div\",\n    null,\n    \"The count is \",\n    count,\n    _react2.default.createElement(\n      \"button\",\n      { onClick: increment },\n      \"increment\"\n    ),\n    _react2.default.createElement(\n      \"button\",\n      { onClick: incrementAsync },\n      \"incrementAsync\"\n    ),\n    _react2.default.createElement(\n      \"button\",\n      { onClick: decrement },\n      \"decrement\"\n    )\n  );\n};\n\nvar mapState = function mapState(_ref3) {\n  var count = _ref3.count;\n  return { count: count };\n};\n\nvar mapDispatch = function mapDispatch(_ref4) {\n  var _ref4$count = _ref4.count,\n      _increment = _ref4$count.increment,\n      _incrementAsync = _ref4$count.incrementAsync,\n      _decrement = _ref4$count.decrement;\n  return {\n    increment: function increment() {\n      return _increment(1);\n    },\n    incrementAsync: function incrementAsync() {\n      return _incrementAsync(1);\n    },\n    decrement: function decrement() {\n      return _decrement(1);\n    }\n  };\n};\n\nvar CountContainer = (0, _reactRedux.connect)(mapState, mapDispatch)(Count);\n\n_reactDom2.default.render(_react2.default.createElement(\n  _reactRedux.Provider,\n  { store: store },\n  _react2.default.createElement(CountContainer, null)\n), document.getElementById('app'));"},"hash":"6a1b248fc499781be3ba75400f619a29"}